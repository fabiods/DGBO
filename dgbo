#!/bin/bash
set -u
set -e
if [ ${GMF:-"undef"} == "undef" ]; then
    echo GMF not defined
    exit
fi

if [ -e "gamma.info" ]; then
   gamma=`cat gamma.info`
   else
   gamma=0    
fi

#LOGFILE="dgbo."$gamma".log"
#rm $LOGFILE

echo "gamma" $gamma
#| tee -a $LOGFILE

pwd 
if [ -e basderfol.sh ]; then
rm basrun.$gamma.log
fi
if [ -e basderfol.sh ]; then
rm basrun.allene.$gamma.dat
fi
if [ -e basderfol.sh ]; then
rm notconv.$gamma.dat
fi
if [ -e basderfol.sh ]; then
rm basderfol.$gamma.log
fi
if [ -e basdergmf.$gamma.log ]; then
rm basdergmf.$gamma.log
fi

# in basdergmf
if [ -e basderfol.sh ]; then
rm allene.$gamma.dat
fi

if [ -e ENEREFZERO.dat ]; then
rm ENEREFZERO.dat
fi 

if [ ! -e inputhf.d12.orig ]; then
   echo "inputhf.d12.orig missed"
   exit
fi

count=0
for start in inputhf.d12.orig inputhf.d12.orig? ; do
  if [[ "$start" != *~ ]] && [[ -e "$start" ]] ; then
    echo 	
#| tee -a $LOGFILE
    echo "STARTFILE" $start
#| tee -a $LOGFILE
    echo  
#| tee -a $LOGFILE
    count=$((count+1))

    ~/DGBO/cry2basrun.sh $start 
#>> $LOGFILE

    if [ -e "bounds_ext.dat" ]; then
 	 echo "using external bounds file "
	 cp bounds_ext.dat bounds.dat
    fi	

    echo "bounds.dat:"
    cat bounds.dat 
    cp bounds.dat bounds0.dat

cp $start".par" inputhf.d12.par

# save
    if [ -e basrun.$gamma.log ]; then
    mv basrun.$gamma.log           xggg1 
    fi
    if [ -e basrun.allene.$gamma.dat ]; then
    mv basrun.allene.$gamma.dat    xggg2 
    fi
    if [ -e notconv.$gamma.dat ]; then
    mv notconv.$gamma.dat          xggg3 
    fi

#set -x
# do always but sotre only for the first orig file
if [ ! -e ENEREFZERO.dat ]; then
    echo "creating ENEREFZERO.dat"  
else
  echo  "ENEREFZERO.dat present"
fi
    cp sedfile.dat basrunsed.dat
    saveGMF=$GMF
    export GMF="%5.3E"
    enerefzero=`~/DGBO/basrun.sh | awk '{print $1}'`
#    grep runcrycond basrun.log
    export GMF=$saveGMF

if [ ! -e ENEREFZERO.dat ]; then
    echo $enerefzero > ENEREFZERO.dat
    echo "enerefzero " $enerefzero  "res:"
else
  echo "origene " $enerefzero  "res:"
fi
#set +x

grep -m 1 gamma basrun.$gamma.log
grep -m 1 maxrmax basrun.$gamma.log

# output from basrun of the orig point are useless
     if [ -e basrun.$gamma.log ]; then
     rm basrun.$gamma.log
     fi
     if [ -e basrun.allene.$gamma.dat ]; then
     rm basrun.allene.$gamma.dat
     fi
     if [ -e notconv.$gamma.dat ]; then
     rm notconv.$gamma.dat
     fi 
     if [ -e xggg1 ]; then
     mv xggg1  basrun.$gamma.log   
     fi
     if [ -e xggg2 ]; then 
     mv xggg2  basrun.allene.$gamma.dat 
     fi
     if [ -e xggg3 ]; then
     mv xggg3  notconv.$gamma.dat     
     fi

#---------this is the run with orig and GMF
echo $GMF
cp sedfile.dat basrunsed.dat
~/DGBO/basrun.sh
cp basrunsed.dat basrunsed.orig$count

#exit

#if [ "1" == "0" ]; then 
#pwd
#python -u ~/opt3.py nd
#wc basrun.allene.dat
#wc notconv.dat
#pwd
#python -u ~/opt3.py pow
#wc basrun.allene.dat
#wc notconv.dat
#python ~/opt3.py direct
#wc basrun.allene.dat
#wc notconv.dat
#pwd
#python -u ~/opt3.py boby
#wc basrun.allene.dat
#wc notconv.dat
#fi


pwd
#-----------------ZOO MAIN RUN-------------
python -u ~/DGBO/opt5zoo.py
#------------------------------------------
wc basrun.allene.$gamma.dat
wc notconv.$gamma.dat 

#python ../../opt3.py bfgs
#python ../../opt3.py direct
#exit
#echo "nd.out"
#tail -n 10 nd.out
#echo "pow.out"
#tail -n 10 pow.out

echo "min gamma:"
sort -k 1 -g -r basrun.allene.$gamma.dat | uniq | tail -n 5
echo "min total:"
sort -k 2 -g -r basrun.allene.$gamma.dat | uniq | tail -n 5

#sort -k 4 -g -r /homex/atom/li_basopt/LioptX/1545/rest/rest3/res4/res5/pscan/file.dat | tail -n 10

fi # file orig

    echo "--- final basis set---"
    echo "from:"
    cat basrunsed.orig$count
    echo "to:"
    cat basrunsed.dat
    ~/DGBO/basrun.sh
    cp basrunsed.dat basrunsed.optorig$count.dat
done
# turned for xmgrace plot
awk '{print $3,$5,$7,$6}' notconv.$gamma.dat | sort -k 1 -g | grep -v NA | uniq > rmax0_enec.$gamma.dat
awk '{print $3,$6,$7}' notconv.$gamma.dat | sort -k 1 -g | grep -v NA | uniq > rmax0_enef.$gamma.dat
sort -k 2 -g -r rmax0_enec.$gamma.dat > rmax0_enec_sorted.$gamma.dat
sort -k 2 -g -r rmax0_enef.$gamma.dat > rmax0_enef_sorted.$gamma.dat

# this was without allene !
sort -k 1 -r -g  basrun.allene.$gamma.dat allene.$gamma.dat | uniq > basrun.allene.$gamma.uniq.dat
awk '{print NF-3}' basrun.allene.$gamma.uniq.dat | head -n 1 > nc.dat
~/DGBO/xdiff.x < basrun.allene.$gamma.uniq.dat

###grep "" *.ene | sort -k 1 -r -g | grep -v NA | tail -n 10
#grep "SCF ENDED - CONVERGENCE ON ENERGY" out* | sort -k 10 -g -r | tail -n 10
echo "check sizes"
echo "allene.dat:"
cat basrun.allene.$gamma.dat allene.$gamma.dat  | sort -k 1 -g -r | uniq | wc
echo "notconv.$gamma.dat"
sort -k 5 -g -r notconv.$gamma.dat   | grep -v NA | uniq | wc
###echo "*.ene"
###ls -alrt *.ene | wc

echo " ---over all final basis set---"
tail -n 1 basrun.allene.$gamma.uniq.dat  

#prepare for basrem
grep PAR inputhf.d12.par | awk '{print $1}' > tmpxx1
tail -n 1 basrun.allene.$gamma.uniq.dat |  awk '{ for (i=4; i<=NF; i++) printf("%s\n",$i); }' >tmpxx2
paste tmpxx1 tmpxx2 > basrunsed.optfinal$gamma.dat
rm tmpxx1 tmpxx2
gfile=`sort -k 5 -g -r notconv.$gamma.dat   | grep -v NA | uniq | tail -n 1 | awk '{printf "out.%s* ",$7}'`

mkdir optfinal$gamma
cp  basrunsed.optfinal$gamma.dat optfinal$gamma/sedfile.dat
cp inputhf.d12.par optfinal$gamma
cp gamma.info    optfinal$gamma  >& /dev/null
cp maxrmax.info  optfinal$gamma   >& /dev/null
cp $gfile        optfinal$gamma
cd  optfinal$gamma
~/DGBO/basrem.sh
cd ..
exit
